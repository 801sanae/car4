<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- UserMapper.xml :: SQL 를 갖는 MetaData - MyBatis Framework 은 XML MetaData 
	를 사용 SQL구문을 관리 (SQL은 xml 을 통해 적절히 캡슐화 되어 애플리케이선 외부로 분리함) - SQL문의 입력(?) / 
	출력(?)을 매핑한다. <== 아래의 select element 참조 -->

<mapper namespace="MessageMapper">

	<resultMap id="MessageSelectMap" type="com.model2.mvc.service.domain.Message">
		<result property="messageNo" column="message_no" jdbcType="INTEGER" />
		<result property="sendUser" column="SEND_USER_NO" jdbcType="INTEGER" />
		<result property="contents" column="contents" jdbcType="VARCHAR" />
		<result property="regDate" column="reg_date" jdbcType="DATE" />
		<result property="tranCode" column="tran_code" jdbcType="VARCHAR" />
		<result property="temp" column="temp" jdbcType="VARCHAR" />

		<association property="user" javaType="com.model2.mvc.service.domain.User">
			<result property="userId" column="user_id" jdbcType="VARCHAR" />
			<result property="userNo" column="user_no" jdbcType="INTEGER" />
			<result property="userName" column="user_name" jdbcType="VARCHAR" />
			<result property="password" column="password" jdbcType="VARCHAR" />
			<result property="phone" column="phone" jdbcType="VARCHAR" />
			<result property="sex" column="sex" jdbcType="VARCHAR" />
			<result property="regDate" column="reg_date" jdbcType="DATE" />
			<result property="role" column="role" jdbcType="VARCHAR" />
			<result property="addr" column="addr" jdbcType="VARCHAR" />
		</association>


	</resultMap>


	<insert id="addMessage" parameterType="com.model2.mvc.service.domain.Message">
		INSERT
		INTO
		MESSAGE(message_no,
		send_user_no, contents, reg_date,
		user_no,
		tran_code)
		VALUES(
		message_no.nextval,
		#{sendUser:INTEGER},
		#{contents:VARCHAR},
		SYSDATE,
		#{user.userNo:INTEGER},
		1
		)
	</insert>

	<!-- 총 게시물  -->
	<select id="getTotalCount" parameterType="com.model2.mvc.common.Search"
		resultType="int">
		SELECT COUNT(*)
		FROM( SELECT message_no 
		FROM message
		<if test="searchCondition != null">
			<where>
				<if test="searchCondition == 0 and searchKeyword !='' ">
					send_user_no = #{searchKeyword}
				</if>
				<if test="searchCondition == 1 and searchKeyword !='' ">
					model LIKE '%'||#{searchKeyword}||'%'
				</if>
			</where>
		</if>
		) countTable
	</select>

 <!-- <select 	id="getMessageList" resultMap="MessageSelectMap" parameterType="com.model2.mvc.common.Search">
 select*from message;
 </select> -->
 
   

  	 <select 	id="getMessageList" resultMap="MessageSelectMap" parameterType="hashMap">
		SELECT  message_no,  contents,  reg_date,  tran_code, 	(select u.user_name from users  u where u.user_no = send_user_no ) AS temp	
	  	FROM  (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	
	  										SELECT *
											FROM message
											ORDER BY reg_date DESC 
											) inner_table 
						WHERE user_no=#{userNo:INTEGER}
										AND ROWNUM &lt;= #{search.endRowNum} )  
		WHERE <!-- user_no=#{userNo:INTEGER} -->
						<!-- AND   -->row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum} 
	 </select>

	<select id="getMessage" parameterType="int" resultMap="MessageSelectMap">
		SELECT *
		FROM
		message
		WHERE
		message_no = #{messageNo}
	</select>

	<update id="updateTranCode" parameterType="int">
		UPDATE message
		<set>
			tran_code = 2
		</set>
		WHERE message_no = #{messageNo}
	</update>

	<delete  id="deleteMessage" parameterType="int">
	  DELETE FROM message 
	  WHERE 
	  message_no = #{messageNo}
	  </delete>

</mapper>